FUNCTION dot_product(VAR ps: FLOAT , v1,v2: ARRAY_OF FLOAT[];) : FLOAT
VAR
    i: INTEGER;
BEGIN
    ps:= 0 // because we need to reset the value of the sum each time we call the function: the dot products changes for each 2 unique vectors
    FOR i FROM 0 TO v1.length STEP 1  DO
       ps:= ps + v1[i]*v2[i];
       RETURN ps
    END_FOR
    
    
END


ALGORITHM Are_Orthogonal
VAR
    dotp: FLOAT := 0;
    n , m , i , j , i1 , i2: INTEGER;  //m represents the dimension of the vector (should be positive)
    v : ARRAY_OF FLOAT[m][n];
BEGIN

    //reading n: should be positive & pair (n pairs of vectors)

    REPEAT
        Write ("please enter the number of vectors");
        Read (n);
        Write ("please enter the dimension of the vectors");
        Read (m);

    UNTIL ((n > 0) AND (m > 0) AND (n % 2 = 0 =) )


    // filling the matrix with vectors
    FOR i FROM 0 TO n-1 STEP 1  DO
     Write ("Please enter vector number" , i);
        FOR j FROM 0 TO m-1 STEP 1  DO
        Read (v[j][i]) ;
        END_FOR
    END_FOR

    // code that lets the user enter the desired vectors indexes in the matrix v
    Write (v);
    Write ("Now please enter the indexed of the two vectors you wish to test their orthogonality");
    
REPEAT
    write("Please enter the first vector's index");
    read (i1);
    write("Please enter the second vector's index");
    read (i2);
    
UNTIL ((i1 >= 0) AND (i1 < n) AND (i2 >= 0) AND (i2 < n) AND (i1 <> i2))

    dotp := dot_product(dotp,v[i1],v[i2]
    IF ( dotp = 0 ) THEN            // checks if the function's output equals 0 or not
    Write (" the vectors" , v[i1], "and" , v[i2] , "are orthogonal");
    ELSE Write (" the vectors" , v[i1], "and" , v[i2] , "are not orthogonal");                                   
    write (" And the value of the dot product is",dotp);
    END_IF


END